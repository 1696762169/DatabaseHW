// <auto-generated />
using System;
using DatabaseHW.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseHW.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230531064403_SetUnicode")]
    partial class SetUnicode
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseHW.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int>("HouseConId")
                        .HasColumnType("int");

                    b.Property<int>("JobConId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountId");

                    b.HasIndex("HouseConId")
                        .IsUnique();

                    b.HasIndex("JobConId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DatabaseHW.Models.Community", b =>
                {
                    b.Property<int>("CommunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunityId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CommunityId");

                    b.HasIndex("Latitude");

                    b.HasIndex("Longitude");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("DatabaseHW.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<byte>("Financing")
                        .HasColumnType("tinyint");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Scale")
                        .HasColumnType("tinyint");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies", t =>
                        {
                            t.HasCheckConstraint("CK_Company_Financing", "[Financing] IN (0,1,2,3,4,5,6)");

                            t.HasCheckConstraint("CK_Company_Scale", "[Scale] IN (0,1,2,3)");
                        });
                });

            modelBuilder.Entity("DatabaseHW.Models.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HouseId"));

                    b.Property<decimal>("Area")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("CommunityId")
                        .HasColumnType("int");

                    b.Property<string>("DetailUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("Entire")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<byte>("Share")
                        .HasColumnType("tinyint");

                    b.Property<short>("TermMax")
                        .HasColumnType("smallint");

                    b.Property<short>("TermMin")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("HouseId");

                    b.HasIndex("CommunityId");

                    b.ToTable("Houses", t =>
                        {
                            t.HasCheckConstraint("CK_House_ES", "[Entire] <> 0 OR [Share] <> 0");

                            t.HasCheckConstraint("CK_House_TermMax", "[TermMax] > [TermMin]");
                        });
                });

            modelBuilder.Entity("DatabaseHW.Models.HouseCondition", b =>
                {
                    b.Property<int>("HouseConId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HouseConId"));

                    b.Property<decimal>("AreaMax")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("AreaMin")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<byte>("Entire")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("PriceMax")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("PriceMin")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<byte>("Share")
                        .HasColumnType("tinyint");

                    b.Property<short>("TermMax")
                        .HasColumnType("smallint");

                    b.Property<short>("TermMin")
                        .HasColumnType("smallint");

                    b.HasKey("HouseConId");

                    b.ToTable("HouseConditions", t =>
                        {
                            t.HasCheckConstraint("CK_HouseCondition_AreaMax", "[AreaMax] > [AreaMin]");

                            t.HasCheckConstraint("CK_HouseCondition_ES", "[Entire] <> 0 OR [Share] <> 0");

                            t.HasCheckConstraint("CK_HouseCondition_PriceMax", "[PriceMax] > [PriceMin]");

                            t.HasCheckConstraint("CK_HouseCondition_TermMax", "[TermMax] > [TermMin]");
                        });
                });

            modelBuilder.Entity("DatabaseHW.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"));

                    b.Property<byte>("Academic")
                        .HasColumnType("tinyint");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DetailUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("FreMax")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FreMin")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("PeriodMax")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PeriodMin")
                        .HasColumnType("tinyint");

                    b.Property<short>("SalaryMax")
                        .HasColumnType("smallint");

                    b.Property<short>("SalaryMin")
                        .HasColumnType("smallint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<int>("WorkplaceId")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WorkplaceId");

                    b.ToTable("Jobs", t =>
                        {
                            t.HasCheckConstraint("CK_Job_Academic", "[Academic] IN (0,1,2,3,4,5)");

                            t.HasCheckConstraint("CK_Job_FreMax", "[FreMax] > [FreMin]");

                            t.HasCheckConstraint("CK_Job_PeriodMax", "[PeriodMax] > [PeriodMin]");

                            t.HasCheckConstraint("CK_Job_SalaryMax", "[SalaryMax] > [SalaryMin]");

                            t.HasCheckConstraint("CK_Job_Type", "[Type] IN (0,1,2,3,4,5)");
                        });
                });

            modelBuilder.Entity("DatabaseHW.Models.JobCondition", b =>
                {
                    b.Property<int>("JobConId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobConId"));

                    b.Property<byte>("Academic")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FreMax")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FreMin")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PeriodMax")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PeriodMin")
                        .HasColumnType("tinyint");

                    b.Property<short>("SalaryMax")
                        .HasColumnType("smallint");

                    b.Property<short>("SalaryMin")
                        .HasColumnType("smallint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("JobConId");

                    b.ToTable("JobConditions", t =>
                        {
                            t.HasCheckConstraint("CK_JobCondition_Academic", "[Academic] IN (0,1,2,3,4,5)");

                            t.HasCheckConstraint("CK_JobCondition_FreMax", "[FreMax] > [FreMin]");

                            t.HasCheckConstraint("CK_JobCondition_PeriodMax", "[PeriodMax] > [PeriodMin]");

                            t.HasCheckConstraint("CK_JobCondition_SalaryMax", "[SalaryMax] > [SalaryMin]");

                            t.HasCheckConstraint("CK_JobCondition_Type", "[Type] IN (0,1,2,3,4,5)");
                        });
                });

            modelBuilder.Entity("DatabaseHW.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<byte>("Range")
                        .HasColumnType("tinyint");

                    b.HasKey("RecordId");

                    b.HasIndex("AccountId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("DatabaseHW.Models.Workplace", b =>
                {
                    b.Property<int>("WorkplaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkplaceId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WorkplaceId");

                    b.HasIndex("Latitude");

                    b.HasIndex("Longitude");

                    b.ToTable("Workplaces");
                });

            modelBuilder.Entity("DatabaseHW.Models.Account", b =>
                {
                    b.HasOne("DatabaseHW.Models.HouseCondition", "HouseCon")
                        .WithOne("Account")
                        .HasForeignKey("DatabaseHW.Models.Account", "HouseConId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseHW.Models.JobCondition", "JobCon")
                        .WithOne("Account")
                        .HasForeignKey("DatabaseHW.Models.Account", "JobConId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseCon");

                    b.Navigation("JobCon");
                });

            modelBuilder.Entity("DatabaseHW.Models.House", b =>
                {
                    b.HasOne("DatabaseHW.Models.Community", "Community")
                        .WithMany("Houses")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");
                });

            modelBuilder.Entity("DatabaseHW.Models.Job", b =>
                {
                    b.HasOne("DatabaseHW.Models.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseHW.Models.Workplace", "Workplace")
                        .WithMany("Jobs")
                        .HasForeignKey("WorkplaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Workplace");
                });

            modelBuilder.Entity("DatabaseHW.Models.Record", b =>
                {
                    b.HasOne("DatabaseHW.Models.Account", "Account")
                        .WithMany("Records")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DatabaseHW.Models.Account", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("DatabaseHW.Models.Community", b =>
                {
                    b.Navigation("Houses");
                });

            modelBuilder.Entity("DatabaseHW.Models.Company", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("DatabaseHW.Models.HouseCondition", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseHW.Models.JobCondition", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseHW.Models.Workplace", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
